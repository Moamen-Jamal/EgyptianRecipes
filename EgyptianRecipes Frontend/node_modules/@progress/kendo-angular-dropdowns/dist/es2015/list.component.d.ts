/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, QueryList, ElementRef, SimpleChange, ChangeDetectorRef, NgZone, Renderer2 } from '@angular/core';
import { AfterViewInit, OnChanges, OnDestroy } from '@angular/core';
import { ListItemDirective } from './list-item.directive';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { GroupTemplateDirective } from './templates/group-template.directive';
import { FixedGroupTemplateDirective } from './templates/fixed-group-template.directive';
import { SelectionService } from './selection.service';
import { DisabledItemsService } from './disabled-items.service';
import { DataService } from './data.service';
import { VirtualizationSettings } from './virtualization-settings';
import { PageChangeEvent } from './common/page-change-event';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ListComponent implements OnChanges, OnDestroy, AfterViewInit {
    dataService: DataService;
    wrapper: ElementRef;
    private selectionService;
    private disabledItemsService;
    private cdr;
    private zone;
    private renderer;
    selected: any[];
    focused: number;
    textField: string;
    valueField: string;
    height: number;
    template: ItemTemplateDirective;
    groupTemplate: GroupTemplateDirective;
    fixedGroupTemplate: FixedGroupTemplateDirective;
    show: boolean;
    id: string;
    optionPrefix: string;
    multipleSelection: boolean;
    virtual: VirtualizationSettings;
    data: any[];
    onClick: EventEmitter<any>;
    pageChange: EventEmitter<PageChangeEvent>;
    items: QueryList<ListItemDirective>;
    content: ElementRef;
    list: ElementRef;
    currentGroup: string;
    startFrom: number;
    lastLoaded: number;
    lastScrollTop: number;
    private scrollToFocused;
    private _data;
    private _items;
    private scrollSubscription;
    private selectSubscription;
    readonly pageSize: number;
    readonly scrollHeight: number;
    constructor(dataService: DataService, wrapper: ElementRef, selectionService: SelectionService, disabledItemsService: DisabledItemsService, cdr: ChangeDetectorRef, zone: NgZone, renderer: Renderer2);
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    firstVisibleItem(): any;
    findCurrentGroup(): void;
    prefetchData(): void;
    changePage(start: number): void;
    index(groupIndex: number, itemIndex: number): number;
    getText(dataItem: any): any;
    getValue(dataItem: any): any;
    isDisabled(index: number): boolean;
    scrollToItem(index: number): void;
    scrollToIndex(index: number): void;
    scroll(item: ElementRef): void;
    private positionItems;
    /**
     * Indicates whether the first group header from the data set is in the targeted virtual page.
     */
    private firstGroupHeaderInTargetedPage;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ListComponent, "kendo-list", never, { "selected": "selected"; "focused": "focused"; "show": "show"; "multipleSelection": "multipleSelection"; "data": "data"; "textField": "textField"; "valueField": "valueField"; "height": "height"; "template": "template"; "groupTemplate": "groupTemplate"; "fixedGroupTemplate": "fixedGroupTemplate"; "id": "id"; "optionPrefix": "optionPrefix"; "virtual": "virtual"; }, { "onClick": "onClick"; "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGlzdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlzdEl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL2xpc3QtaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSXRlbVRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZXMvaXRlbS10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdGVtcGxhdGVzL2dyb3VwLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlcy9maXhlZC1ncm91cC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4vc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGlzYWJsZWRJdGVtc1NlcnZpY2UgfSBmcm9tICcuL2Rpc2FibGVkLWl0ZW1zLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YVNlcnZpY2UgfSBmcm9tICcuL2RhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBWaXJ0dWFsaXphdGlvblNldHRpbmdzIH0gZnJvbSAnLi92aXJ0dWFsaXphdGlvbi1zZXR0aW5ncyc7XG5pbXBvcnQgeyBQYWdlQ2hhbmdlRXZlbnQgfSBmcm9tICcuL2NvbW1vbi9wYWdlLWNoYW5nZS1ldmVudCc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBkYXRhU2VydmljZTogRGF0YVNlcnZpY2U7XG4gICAgd3JhcHBlcjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIHNlbGVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZEl0ZW1zU2VydmljZTtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBzZWxlY3RlZDogYW55W107XG4gICAgZm9jdXNlZDogbnVtYmVyO1xuICAgIHRleHRGaWVsZDogc3RyaW5nO1xuICAgIHZhbHVlRmllbGQ6IHN0cmluZztcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICB0ZW1wbGF0ZTogSXRlbVRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIGdyb3VwVGVtcGxhdGU6IEdyb3VwVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgZml4ZWRHcm91cFRlbXBsYXRlOiBGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgc2hvdzogYm9vbGVhbjtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9wdGlvblByZWZpeDogc3RyaW5nO1xuICAgIG11bHRpcGxlU2VsZWN0aW9uOiBib29sZWFuO1xuICAgIHZpcnR1YWw6IFZpcnR1YWxpemF0aW9uU2V0dGluZ3M7XG4gICAgZGF0YTogYW55W107XG4gICAgb25DbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPFBhZ2VDaGFuZ2VFdmVudD47XG4gICAgaXRlbXM6IFF1ZXJ5TGlzdDxMaXN0SXRlbURpcmVjdGl2ZT47XG4gICAgY29udGVudDogRWxlbWVudFJlZjtcbiAgICBsaXN0OiBFbGVtZW50UmVmO1xuICAgIGN1cnJlbnRHcm91cDogc3RyaW5nO1xuICAgIHN0YXJ0RnJvbTogbnVtYmVyO1xuICAgIGxhc3RMb2FkZWQ6IG51bWJlcjtcbiAgICBsYXN0U2Nyb2xsVG9wOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzY3JvbGxUb0ZvY3VzZWQ7XG4gICAgcHJpdmF0ZSBfZGF0YTtcbiAgICBwcml2YXRlIF9pdGVtcztcbiAgICBwcml2YXRlIHNjcm9sbFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHNlbGVjdFN1YnNjcmlwdGlvbjtcbiAgICByZWFkb25seSBwYWdlU2l6ZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHNjcm9sbEhlaWdodDogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGRhdGFTZXJ2aWNlOiBEYXRhU2VydmljZSwgd3JhcHBlcjogRWxlbWVudFJlZiwgc2VsZWN0aW9uU2VydmljZTogU2VsZWN0aW9uU2VydmljZSwgZGlzYWJsZWRJdGVtc1NlcnZpY2U6IERpc2FibGVkSXRlbXNTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCB6b25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZmlyc3RWaXNpYmxlSXRlbSgpOiBhbnk7XG4gICAgZmluZEN1cnJlbnRHcm91cCgpOiB2b2lkO1xuICAgIHByZWZldGNoRGF0YSgpOiB2b2lkO1xuICAgIGNoYW5nZVBhZ2Uoc3RhcnQ6IG51bWJlcik6IHZvaWQ7XG4gICAgaW5kZXgoZ3JvdXBJbmRleDogbnVtYmVyLCBpdGVtSW5kZXg6IG51bWJlcik6IG51bWJlcjtcbiAgICBnZXRUZXh0KGRhdGFJdGVtOiBhbnkpOiBhbnk7XG4gICAgZ2V0VmFsdWUoZGF0YUl0ZW06IGFueSk6IGFueTtcbiAgICBpc0Rpc2FibGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHNjcm9sbFRvSXRlbShpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzY3JvbGxUb0luZGV4KGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHNjcm9sbChpdGVtOiBFbGVtZW50UmVmKTogdm9pZDtcbiAgICBwcml2YXRlIHBvc2l0aW9uSXRlbXM7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZpcnN0IGdyb3VwIGhlYWRlciBmcm9tIHRoZSBkYXRhIHNldCBpcyBpbiB0aGUgdGFyZ2V0ZWQgdmlydHVhbCBwYWdlLlxuICAgICAqL1xuICAgIHByaXZhdGUgZmlyc3RHcm91cEhlYWRlckluVGFyZ2V0ZWRQYWdlO1xufVxuIl19