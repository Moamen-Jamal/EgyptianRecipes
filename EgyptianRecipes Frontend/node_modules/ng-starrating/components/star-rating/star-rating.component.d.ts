import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class StarRatingComponent {
    private stars;
    private _checkedColor;
    private _unCheckedColor;
    private _value;
    private _size;
    private _readOnly;
    private _totalStars;
    private onStarsCountChange;
    private onValueChange;
    private onCheckedColorChange;
    private onUnCheckedColorChange;
    private onSizeChange;
    private onReadOnlyChange;
    private static readonly VAR_CHECKED_COLOR;
    private static readonly VAR_UNCHECKED_COLOR;
    private static readonly VAR_SIZE;
    private static readonly VAR_HALF_WIDTH;
    private static readonly VAR_HALF_MARGIN;
    private static readonly CLS_CHECKED_STAR;
    private static readonly CLS_DEFAULT_STAR;
    private static readonly CLS_HALF_STAR;
    private static readonly INP_CHECKED_COLOR;
    private static readonly INP_UNCHECKED_COLOR;
    private static readonly INP_VALUE;
    private static readonly INP_SIZE;
    private static readonly INP_READONLY;
    private static readonly INP_TOTALSTARS;
    private mainElement;
    constructor();
    get checkedcolor(): string;
    get uncheckedcolor(): string;
    get value(): number;
    get size(): string;
    get readonly(): boolean;
    get totalstars(): number;
    rate: EventEmitter<{
        oldValue: number;
        newValue: number;
        starRating: StarRatingComponent;
    }>;
    set checkedcolor(value: string);
    set uncheckedcolor(value: string);
    set value(value: number);
    set size(value: string);
    set readonly(value: boolean);
    set totalstars(value: number);
    private makeEditable;
    private makeReadOnly;
    private addEvents;
    private ngAfterViewInit;
    private onRate;
    private onStar;
    private offStar;
    private addDefaultClass;
    private addCheckedStarClass;
    private addHalfStarClass;
    private setStars;
    private applySizeAllStars;
    private applyColorStyleAllStars;
    private applyColorStyle;
    private applyCheckedColorStyle;
    private applyUnCheckedColorStyle;
    private generateRating;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StarRatingComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StarRatingComponent, "star-rating", never, { "checkedcolor": "checkedcolor"; "uncheckedcolor": "uncheckedcolor"; "value": "value"; "size": "size"; "readonly": "readonly"; "totalstars": "totalstars"; }, { "rate": "rate"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInN0YXItcmF0aW5nLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdGFyUmF0aW5nQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgc3RhcnM7XHJcbiAgICBwcml2YXRlIF9jaGVja2VkQ29sb3I7XHJcbiAgICBwcml2YXRlIF91bkNoZWNrZWRDb2xvcjtcclxuICAgIHByaXZhdGUgX3ZhbHVlO1xyXG4gICAgcHJpdmF0ZSBfc2l6ZTtcclxuICAgIHByaXZhdGUgX3JlYWRPbmx5O1xyXG4gICAgcHJpdmF0ZSBfdG90YWxTdGFycztcclxuICAgIHByaXZhdGUgb25TdGFyc0NvdW50Q2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBvblZhbHVlQ2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBvbkNoZWNrZWRDb2xvckNoYW5nZTtcclxuICAgIHByaXZhdGUgb25VbkNoZWNrZWRDb2xvckNoYW5nZTtcclxuICAgIHByaXZhdGUgb25TaXplQ2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBvblJlYWRPbmx5Q2hhbmdlO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVkFSX0NIRUNLRURfQ09MT1I7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBWQVJfVU5DSEVDS0VEX0NPTE9SO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVkFSX1NJWkU7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBWQVJfSEFMRl9XSURUSDtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFZBUl9IQUxGX01BUkdJTjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMU19DSEVDS0VEX1NUQVI7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTFNfREVGQVVMVF9TVEFSO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xTX0hBTEZfU1RBUjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOUF9DSEVDS0VEX0NPTE9SO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSU5QX1VOQ0hFQ0tFRF9DT0xPUjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOUF9WQUxVRTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOUF9TSVpFO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSU5QX1JFQURPTkxZO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSU5QX1RPVEFMU1RBUlM7XHJcbiAgICBwcml2YXRlIG1haW5FbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoKTtcclxuICAgIGdldCBjaGVja2VkY29sb3IoKTogc3RyaW5nO1xyXG4gICAgZ2V0IHVuY2hlY2tlZGNvbG9yKCk6IHN0cmluZztcclxuICAgIGdldCB2YWx1ZSgpOiBudW1iZXI7XHJcbiAgICBnZXQgc2l6ZSgpOiBzdHJpbmc7XHJcbiAgICBnZXQgcmVhZG9ubHkoKTogYm9vbGVhbjtcclxuICAgIGdldCB0b3RhbHN0YXJzKCk6IG51bWJlcjtcclxuICAgIHJhdGU6IEV2ZW50RW1pdHRlcjx7XHJcbiAgICAgICAgb2xkVmFsdWU6IG51bWJlcjtcclxuICAgICAgICBuZXdWYWx1ZTogbnVtYmVyO1xyXG4gICAgICAgIHN0YXJSYXRpbmc6IFN0YXJSYXRpbmdDb21wb25lbnQ7XHJcbiAgICB9PjtcclxuICAgIHNldCBjaGVja2VkY29sb3IodmFsdWU6IHN0cmluZyk7XHJcbiAgICBzZXQgdW5jaGVja2VkY29sb3IodmFsdWU6IHN0cmluZyk7XHJcbiAgICBzZXQgdmFsdWUodmFsdWU6IG51bWJlcik7XHJcbiAgICBzZXQgc2l6ZSh2YWx1ZTogc3RyaW5nKTtcclxuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBzZXQgdG90YWxzdGFycyh2YWx1ZTogbnVtYmVyKTtcclxuICAgIHByaXZhdGUgbWFrZUVkaXRhYmxlO1xyXG4gICAgcHJpdmF0ZSBtYWtlUmVhZE9ubHk7XHJcbiAgICBwcml2YXRlIGFkZEV2ZW50cztcclxuICAgIHByaXZhdGUgbmdBZnRlclZpZXdJbml0O1xyXG4gICAgcHJpdmF0ZSBvblJhdGU7XHJcbiAgICBwcml2YXRlIG9uU3RhcjtcclxuICAgIHByaXZhdGUgb2ZmU3RhcjtcclxuICAgIHByaXZhdGUgYWRkRGVmYXVsdENsYXNzO1xyXG4gICAgcHJpdmF0ZSBhZGRDaGVja2VkU3RhckNsYXNzO1xyXG4gICAgcHJpdmF0ZSBhZGRIYWxmU3RhckNsYXNzO1xyXG4gICAgcHJpdmF0ZSBzZXRTdGFycztcclxuICAgIHByaXZhdGUgYXBwbHlTaXplQWxsU3RhcnM7XHJcbiAgICBwcml2YXRlIGFwcGx5Q29sb3JTdHlsZUFsbFN0YXJzO1xyXG4gICAgcHJpdmF0ZSBhcHBseUNvbG9yU3R5bGU7XHJcbiAgICBwcml2YXRlIGFwcGx5Q2hlY2tlZENvbG9yU3R5bGU7XHJcbiAgICBwcml2YXRlIGFwcGx5VW5DaGVja2VkQ29sb3JTdHlsZTtcclxuICAgIHByaXZhdGUgZ2VuZXJhdGVSYXRpbmc7XHJcbn1cclxuIl19